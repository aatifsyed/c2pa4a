import { ZKEdDSAEventTicketPCDPackage } from "@pcd/zk-eddsa-event-ticket-pcd";
import { NextApiRequest, NextApiResponse } from "next";
import { hexToBigInt } from "viem";
import { createWalletClient, http, isAddress, parseEther } from "viem";
import { hardhat } from "viem/chains";
import { isETHBerlinPublicKey } from "~~/utils/scaffold-eth/pcd";

const localWalletClient = createWalletClient({
  chain: hardhat,
  transport: http(),
});

const accounts = await localWalletClient.getAddresses();

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method not allowed" });
  }

  const { pcd: pcdStr, address, coordinates, video } = req.body;

  // Parse the PCD string
  const pcd = await ZKEdDSAEventTicketPCDPackage.deserialize(pcdStr);

  console.log(`[INFO] PCD String:`, pcdStr);
  console.log(`[INFO] PCD:`, pcd);
  console.log(`[INFO] Address:`, address);
  console.log(`[INFO] Coordinates:`, coordinates);


  // ## Validations
  if (!isAddress(address)) {
    return res.status(401).send("Invalid address");
  }

  if (!(await ZKEdDSAEventTicketPCDPackage.verify(pcd))) {
    console.error(`[ERROR] ZK ticket PCD is not valid`);

    return res.status(401).send("ZK ticket PCD is not valid");
  }

  if (!isETHBerlinPublicKey(pcd.claim.signer)) {
    console.error(`[ERROR] PCD is not signed by Zupass`);

    return res.status(401).send("PCD is not signed by ETHBerlin");
  }

  // TODO: Use real nonce generated by the server
  if (pcd.claim.watermark.toString() !== hexToBigInt(address as `0x${string}`).toString()) {
    console.error(`[ERROR] PCD watermark doesn't match`);

    res.status(401).send("PCD watermark doesn't match");
    return;
  }

  // TODO: Check that the event id is the one we expect

  // ## Actions
  // Send ETH to the user. This is just for testing purposes, and it could be any backend action.
  // const result = await localWalletClient.sendTransaction({
  //   to: req.body.address,
  //   value: parseEther("1"),
  //   account: accounts[0],
  // });

  return res.status(200).json({ message: `ðŸŽ‰ PCD verified!`});
}
