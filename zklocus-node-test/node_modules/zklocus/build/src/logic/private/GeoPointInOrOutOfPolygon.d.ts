import { Empty, SelfProof } from "o1js";
import { GeoPointInOutPolygonCommitment } from "../../model/private/Commitment";
import { GeoPointInPolygonCircuitProof } from "../../zkprogram/private/GeoPointInPolygonCircuit";
/**
 * Creates a GeoPointInOutPolygonCommitment object based on the provided inside and outside proofs.
 *
 * @param insideProof - The proof of the GeoPoint being inside a polygon.
 * @param outsideProof - The proof of the GeoPoint being outside a polygon.
 * @returns A GeoPointInOutPolygonCommitment object.
 */
export declare function fromPointInPolygonProofs(insideProof: GeoPointInPolygonCircuitProof, outsideProof: GeoPointInPolygonCircuitProof): GeoPointInOutPolygonCommitment;
/**
 * Extends a self-proof and a point-in-polygon proof to create a commitment to a GeoPoint inside or outside a polygon.
 * If the `pointInPolygonProof` is a proof of the GeoPoint being inside the polygon, then the `selfProof`'s public output
 * `insidePolygonCommitment` will be extended with the `pointInPolygonProof`'s public output `polygonCommitment`.
 * If the `pointInPolygonProof` is a proof of the GeoPoint being outside the polygon, then the `selfProof`'s public output
 * `outsidePolygonCommitment` will be extended with the `pointInPolygonProof`'s public output `polygonCommitment`.
 *
 * @param selfProof The self-proof of the geo point being inside or outside the polygon.
 * @param pointInPolygonProof The point-in-polygon proof of the geo point being inside the polygon.
 * @returns The commitment to the geo point inside or outside the polygon.
 */
export declare function extendWithPointInPolygonProof(selfProof: SelfProof<Empty, GeoPointInOutPolygonCommitment>, pointInPolygonProof: GeoPointInPolygonCircuitProof): GeoPointInOutPolygonCommitment;
