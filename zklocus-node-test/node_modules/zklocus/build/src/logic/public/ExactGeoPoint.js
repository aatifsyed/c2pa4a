import { Poseidon } from "o1js";
import { GeoPointCommitment, MetadataGeoPointCommitment } from "../../model/public/Commitment";
/*
* Create a commitment to an exact GeoPoint provided by a GeoPointProviderCircuitProof.
*
* WARNING: The GeoPoint's latitude and longitude are visible to any external party. This method must only be used
*   when sharing of the exact GeoGraphical coordinates is desirable.
*
* The return value (`GeoPointCommitment`) can be combined with a Nonce for semi-private geolocation sharing.
*/
export function proveExactGeoPointFromProvider(geoPointProviderProof) {
    geoPointProviderProof.verify();
    const geoPoint = geoPointProviderProof.publicOutput;
    const geoPointHash = geoPoint.hash();
    return new GeoPointCommitment({
        geoPointHash: geoPointHash
    });
}
export function attachMetadataToGeoPoint(geoPointProviderProof, sha3_512) {
    geoPointProviderProof.verify();
    const geoPoint = geoPointProviderProof.publicOutput;
    const geoPointHash = geoPoint.hash();
    const sha3_512PoseidonHash = Poseidon.hash(sha3_512.toFields());
    return new MetadataGeoPointCommitment({
        geoPointHash: geoPointHash,
        metadataHash: sha3_512PoseidonHash
    });
}
//# sourceMappingURL=ExactGeoPoint.js.map