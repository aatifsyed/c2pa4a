import { ZKSignature } from "../../../../api/models/ZKSignature";
import { ZKPublicKey } from "../../../../api/models/ZKPublicKey";
import { ZKGeoPoint } from "../../../../api/models/ZKGeoPoint";
import { ZKGeoPointProviderCircuitProof } from "../../../../api/proofs/ZKGeoPointProviderCircuitProof";
const isProofsEnabled = true;
class OracleSignature {
    constructor(zkPublicKey, zkSignature, zkGeoPoint) {
        this.zkPublicKey = zkPublicKey;
        this.zkSignature = zkSignature;
        this.zkGeoPoint = zkGeoPoint;
    }
}
describe('Integration Oracle', () => {
    beforeAll(async () => {
        if (isProofsEnabled) {
            await ZKGeoPointProviderCircuitProof.compile();
        }
    });
    describe('Valid Signature', () => {
        const oraclePublicKey = new ZKPublicKey("B62qpo8S8Jzd3P6UyuuJwVB5SUF4r8TYhHqCBC5bFZV4pSonBNcW3DB");
        let validZKGeoPoint = new ZKGeoPoint(89.123, -123.123);
        let validOracleGeoPoint = new OracleSignature(oraclePublicKey, new ZKSignature("7mX9SFseeigBzjNjzH4e4gnPe9HAoXQD85nKiwd9piobx71ZpDYYZ6WJtZXjaATb6kSXf8FEHFKgv6CiQ8SHUgNiaEL26FtP"), new ZKGeoPoint(89.123, -123.123));
        describe('when valid GeoPoint signature is provided to ZK Circuit', () => {
            it('computes the authenticated geolocation commitment correclty', async () => {
                const zkGeoPointSource = await validZKGeoPoint.Prove.authenticateFromIntegrationOracle(validOracleGeoPoint.zkPublicKey, validOracleGeoPoint.zkSignature);
                zkGeoPointSource.verify();
                expect(zkGeoPointSource.zkGeoPoint.isEquals(validZKGeoPoint)).toBe(true);
            });
        });
    });
});
//# sourceMappingURL=IntegrationOracle.test.js.map