import { RawCoordinates } from "../Types";
import { GeoPoint, ThreePointPolygon } from "../../model/Geography";
import { HashableZKLocusAdopter, ZKLocusHashable } from "../adopters/Interfaces";
import { ZKGeoPoint } from "./ZKGeoPoint";
import { Field } from "o1js";
export declare class ZKThreePointPolygon implements ZKLocusHashable<ZKThreePointPolygon, Field> {
    private _vertices;
    get vertices(): [ZKGeoPoint, ZKGeoPoint, ZKGeoPoint];
    constructor(vertex1: ZKGeoPoint | RawCoordinates, vertex2: ZKGeoPoint | RawCoordinates, vertex3: ZKGeoPoint | RawCoordinates);
    /**
     * Gets the maximum factor value among the vertices of the polygon.
     * @returns The maximum factor value.
     */
    get factor(): number;
    isEquals(other: ZKThreePointPolygon): boolean;
    hash(): Field;
    combinedHash(elements: ZKThreePointPolygon[]): Field;
    static combinedHash(polygons: ZKThreePointPolygon[]): Field;
    static fromThreePointPolygon(threePointPolygon: ThreePointPolygon): ZKThreePointPolygon;
    toString(): string;
}
export interface ZKThreePointPolygon extends HashableZKLocusAdopter<[ZKGeoPoint, ZKGeoPoint, ZKGeoPoint], [GeoPoint, GeoPoint, GeoPoint], ThreePointPolygon, ZKThreePointPolygon, Field> {
}
