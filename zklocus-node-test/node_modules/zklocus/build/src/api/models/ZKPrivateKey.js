var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { PrivateKey } from "o1js";
import ZKPrivateKeyToPrivateKeyAdopter from "../adopters/ZKPrivateKeyToPrivateKeyAdopter";
import { ZKKeyPair } from "./ZKKeyPair";
import { ZKPublicKey } from "./ZKPublicKey";
let ZKPrivateKey = class ZKPrivateKey extends ZKKeyPair {
    constructor(privateKeyOrBase58) {
        super();
        if (typeof privateKeyOrBase58 === "string") {
            this.key = PrivateKey.fromBase58(privateKeyOrBase58);
        }
        else {
            this.key = privateKeyOrBase58;
        }
        this._raw = privateKeyOrBase58;
    }
    get raw() {
        return this._raw;
    }
    get normalized() {
        return this.key;
    }
    /**
     * Derives the associated public key.
     * @returns a {@link ZKPublicKey}.
     */
    toPublicKey() {
        return new ZKPublicKey(this.key.toPublicKey());
    }
    verifyPublicKey(zkPublicKey) {
        return this.key.toPublicKey().toBase58() === zkPublicKey.toBase58();
    }
};
ZKPrivateKey = __decorate([
    ZKPrivateKeyToPrivateKeyAdopter,
    __metadata("design:paramtypes", [Object])
], ZKPrivateKey);
export { ZKPrivateKey };
//# sourceMappingURL=ZKPrivateKey.js.map