var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ZKNumber_1;
import ZKNumberToInt64Adopter from "../adopters/ZKNumberToInt64Adopter";
import Decimal from "decimal.js";
/**
 * Represents a ZKNumber, which is a wrapper class for numeric values used in zkLocus.
 * The ZKNumber class provides methods to access the raw, normalized, and scaled values of the number,
 * as well as the factor and number of decimals.
 * The number will be converted to the Fields of a zkSNARK in zkLocus.
 */
let ZKNumber = ZKNumber_1 = class ZKNumber {
    /**
     * Checks if the current ZKNumber is equal to another ZKNumber.
     * @param other The ZKNumber to compare with.
     * @returns True if the ZKNumbers are equal, false otherwise.
     */
    isEquals(other) {
        return this.normalized === other.normalized;
    }
    isGreaterThan(other) {
        return this.normalized > other.normalized;
    }
    /**
     * Creates a new instance of the ZKNumber class.
     * @param value The input number to be wrapped.
     */
    constructor(value) {
        this._raw_value = value;
        const decimalValue = new Decimal(value);
        this._normalized_value = Number(decimalValue);
        this._num_decimals = decimalValue.decimalPlaces();
        this._factor = ZKNumber_1.computeFactorForNumber(this._normalized_value);
    }
    /**
     * Gets the raw value of the ZKNumber.
     */
    get raw() {
        return this._raw_value;
    }
    /**
     * Gets the normalized value of the ZKNumber.
     */
    get normalized() {
        return this._normalized_value;
    }
    /**
     * Gets the scaled value of the ZKNumber.
     */
    get scaled() {
        const nomralizedDecimal = new Decimal(this._normalized_value);
        const factorDecimal = new Decimal(this.factor);
        const scaledDecimal = nomralizedDecimal.mul(factorDecimal);
        const fixedDecimal = scaledDecimal.toFixed(0);
        return Number(fixedDecimal);
    }
    /**
     * Increases the factor of the ZKNumber.
     *
     * NOTE: this will be refactored in the future.
     * @param factor - The factor to increase by.
     * @throws Error if the specified factor is less than the current factor.
     */
    increaseFactor(factor) {
        if (factor >= this._factor) {
            this._factor = factor;
        }
        else {
            throw new Error(`Cannot set factor to ${factor} because it is less than the current factor ${this._factor}`);
        }
    }
    /**
     * Gets the factor of the ZKNumber.
     * The factor is a power of 10, and it's equal to 10 ^ num_decimals.
     * For numbers without decimals (i.e. integers), the factor is 1.
     */
    get factor() {
        return this._factor;
    }
    static computeFactorForNumber(value) {
        const decimalValue = new Decimal(value);
        const numDecimals = decimalValue.decimalPlaces();
        const decimalFactor = new Decimal(10).pow(numDecimals);
        const decimalFactorFixed = decimalFactor.toFixed(0);
        return Number(decimalFactorFixed);
    }
    get numDecimals() {
        return this._num_decimals;
    }
    /**
     * Counts the number of decimals in the normalized value.
     * @returns The number of decimals.
     */
    countNumDecimals() {
        const decimal = new Decimal(this._normalized_value);
        return decimal.decimalPlaces();
    }
    toString() {
        return `ZKNumber(Raw: ${this.raw}, Normalized: ${this.normalized}, Scaled: ${this.scaled}, Factor: ${this.factor}, NumDecimals: ${this.numDecimals})`;
    }
};
ZKNumber = ZKNumber_1 = __decorate([
    ZKNumberToInt64Adopter,
    __metadata("design:paramtypes", [Object])
], ZKNumber);
export { ZKNumber };
//# sourceMappingURL=ZKNumber.js.map