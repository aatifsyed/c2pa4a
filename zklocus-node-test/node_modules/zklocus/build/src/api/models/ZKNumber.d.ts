import { Int64 } from "o1js";
import { InputNumber } from "../Types";
import { ZKLocusAdopter } from "../adopters/Interfaces";
/**
 * Represents a ZKNumber, which is a wrapper class for numeric values used in zkLocus.
 * The ZKNumber class provides methods to access the raw, normalized, and scaled values of the number,
 * as well as the factor and number of decimals.
 * The number will be converted to the Fields of a zkSNARK in zkLocus.
 */
export declare class ZKNumber {
    protected _raw_value: InputNumber;
    protected _normalized_value: number;
    protected _num_decimals: number;
    protected _factor: number;
    /**
     * Checks if the current ZKNumber is equal to another ZKNumber.
     * @param other The ZKNumber to compare with.
     * @returns True if the ZKNumbers are equal, false otherwise.
     */
    isEquals(other: ZKNumber): boolean;
    isGreaterThan(other: ZKNumber): boolean;
    /**
     * Creates a new instance of the ZKNumber class.
     * @param value The input number to be wrapped.
     */
    constructor(value: InputNumber);
    /**
     * Gets the raw value of the ZKNumber.
     */
    get raw(): InputNumber;
    /**
     * Gets the normalized value of the ZKNumber.
     */
    get normalized(): number;
    /**
     * Gets the scaled value of the ZKNumber.
     */
    get scaled(): number;
    /**
     * Increases the factor of the ZKNumber.
     *
     * NOTE: this will be refactored in the future.
     * @param factor - The factor to increase by.
     * @throws Error if the specified factor is less than the current factor.
     */
    increaseFactor(factor: number): void;
    /**
     * Gets the factor of the ZKNumber.
     * The factor is a power of 10, and it's equal to 10 ^ num_decimals.
     * For numbers without decimals (i.e. integers), the factor is 1.
     */
    get factor(): number;
    private static computeFactorForNumber;
    get numDecimals(): number;
    /**
     * Counts the number of decimals in the normalized value.
     * @returns The number of decimals.
     */
    protected countNumDecimals(): number;
    toString(): string;
}
export interface ZKNumber extends ZKLocusAdopter<InputNumber, number, Int64> {
}
