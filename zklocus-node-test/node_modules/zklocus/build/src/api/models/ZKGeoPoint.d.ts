import type { Field } from "o1js";
import type { InputNumber } from "../Types";
import type { GeoPoint } from "../../model/Geography";
import type { HashableZKLocusAdopter } from "../adopters/Interfaces";
import { IZKGeoPointProver } from "../provers/IZKGeoPointProver";
import type { ZKNumber } from "./ZKNumber";
import { ZKLatitude } from "./ZKLatitude";
import { ZKLongitude } from "./ZKLongitude";
export declare class ZKGeoPoint {
    protected _latitude: ZKLatitude;
    protected _longitude: ZKLongitude;
    protected _rawValue: {
        latitude: InputNumber | ZKLatitude;
        longitude: InputNumber | ZKLongitude;
    };
    constructor(latitude: InputNumber | ZKLatitude, longitude: InputNumber | ZKLongitude);
    get latitude(): ZKLatitude;
    get longitude(): ZKLongitude;
    get asRawValue(): {
        latitude: InputNumber | ZKLatitude;
        longitude: InputNumber | ZKLongitude;
    };
    get factor(): number;
    static fromGeoPoint(geoPoint: GeoPoint): ZKGeoPoint;
    /**
     * Checks if the current ZKGeoPoint is equal to another ZKGeoPoint.
     * @param other The ZKGeoPoint to compare with.
     * @returns True if the ZKGeoPoints are equal, false otherwise.
     */
    isEquals(other: ZKGeoPoint): boolean;
    toString(): string;
}
export interface ZKGeoPoint extends HashableZKLocusAdopter<{
    latitude: InputNumber | ZKLatitude;
    longitude: InputNumber | ZKLongitude;
}, {
    latitude: ZKLatitude;
    longitude: ZKLongitude;
    factor: ZKNumber;
}, GeoPoint, ZKGeoPoint, Field>, IZKGeoPointProver {
}
