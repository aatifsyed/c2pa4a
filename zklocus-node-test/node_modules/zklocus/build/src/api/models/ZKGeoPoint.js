var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ZKGeoPoint_1;
import ZKGeoPointToGeoPointAdopter from "../adopters/ZKGeoPointToGeoPointAdopter";
import ZKGeoPointProver from "../provers/ZKGeoPointProver";
import { ZKLatitude } from "./ZKLatitude";
import { ZKLongitude } from "./ZKLongitude";
/*
    Represents a geographical point in TypeScript that will be converted into a zkLocus geographical point.
    A zkLocus geographical point is one that can be used in a zero-knowledge circuit. zkLocus uses O1JS to
    implement zero-knowledge circuits, so a zkLocus geographical point is one that is represented in a
    valid set of O1JS structures.

    All of the zero-knowledge functionality is also avaialbe on this class, namely:

    1. Proving wether a point is in polygon
    2. Proving the exact location.
*/
let ZKGeoPoint = ZKGeoPoint_1 = class ZKGeoPoint {
    constructor(latitude, longitude) {
        this._rawValue = {
            latitude: latitude,
            longitude: longitude,
        };
        this._latitude = latitude instanceof ZKLatitude ? latitude : new ZKLatitude(latitude);
        this._longitude = longitude instanceof ZKLongitude ? longitude : new ZKLongitude(longitude);
        const maximumFactor = Math.max(this._latitude.factor, this._longitude.factor);
        this._latitude.increaseFactor(maximumFactor);
        this._longitude.increaseFactor(maximumFactor);
    }
    get latitude() {
        return this._latitude;
    }
    get longitude() {
        return this._longitude;
    }
    get asRawValue() {
        return this._rawValue;
    }
    get factor() {
        return Math.max(this.latitude.factor, this.longitude.factor);
    }
    /*
    * Create a ZKGeoPoint from a GeoPoint.
    */
    static fromGeoPoint(geoPoint) {
        const latitude = geoPoint.latitude;
        const longitude = geoPoint.longitude;
        const factor = geoPoint.factor;
        const latitudeAsNumber = Number(latitude.toString());
        const longitudeAsNumber = Number(longitude.toString());
        const factorAsNumber = Number(factor.toString());
        const latitudeDecimal = latitudeAsNumber / factorAsNumber;
        const longitudeDecimal = longitudeAsNumber / factorAsNumber;
        return new ZKGeoPoint_1(latitudeDecimal, longitudeDecimal);
    }
    /**
     * Checks if the current ZKGeoPoint is equal to another ZKGeoPoint.
     * @param other The ZKGeoPoint to compare with.
     * @returns True if the ZKGeoPoints are equal, false otherwise.
     */
    isEquals(other) {
        return this.latitude.isEquals(other.latitude) && this.longitude.isEquals(other.longitude);
    }
    toString() {
        return `ZKGeoPoint(${this.latitude}, ${this.longitude})`;
    }
};
ZKGeoPoint = ZKGeoPoint_1 = __decorate([
    ZKGeoPointProver,
    ZKGeoPointToGeoPointAdopter,
    __metadata("design:paramtypes", [Object, Object])
], ZKGeoPoint);
export { ZKGeoPoint };
//# sourceMappingURL=ZKGeoPoint.js.map