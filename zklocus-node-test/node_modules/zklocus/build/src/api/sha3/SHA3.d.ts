import { Bytes, Field } from "o1js";
import { ProvablePureExtended } from "o1js/dist/node/lib/circuit_value";
declare const Bytes64_base: typeof import("o1js/dist/node/lib/provable-types/bytes").Bytes;
/**
 * Represents a 64-byte array.
 */
export declare class Bytes64 extends Bytes64_base {
}
/**
 * Represents an SHA3-512 hash fully compatible with Zero-Knowledge circuits.
 */
export declare class SHA3_512 {
    protected readonly _preimage: string;
    protected _preimageBytes: Bytes64;
    protected _digest: Bytes64;
    /**
     * Creates a new instance of SHA3_512.
     * @param _preimage The preimage string to be hashed.
     */
    constructor(_preimage: string);
    /**
     * Gets the provable type that can be used in Zero-Knowledge circuits.
     * @returns The provable type
     */
    static get provable(): ProvablePureExtended<Bytes, {
        bytes: {
            value: string;
        }[];
    }>;
    /**
     * Gets the `Bytes64` representation of the preimage.
     * @returns The `Bytes64` representation of the preimage.
     */
    get preimageBytes(): Bytes64;
    /**
     * Gets the `Bytes64` representation of the digest.
     * @returns The `Bytes64` representation of the digest.
     */
    get digest(): Bytes64;
    /**
     * Gets raw preimage string. This is the string that was used to create the SHA3_512 instance.
     * @returns The raw preimage string.
     */
    get preimage(): string;
    /**
     * Returns the Poseidon.hash() of the SHA3-512 digest of the preimage. This is the commitment used
     * in the Zero-Knowledge circuits of zkLocus.
     * @returns The Poseidon.hash() of the SHA3-512 digest of the preimage.
     */
    poseidonHash(): Field;
}
export {};
