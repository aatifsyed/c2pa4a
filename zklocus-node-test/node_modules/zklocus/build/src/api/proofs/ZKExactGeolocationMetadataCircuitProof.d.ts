import type { JsonProof } from "o1js";
import type { MetadataGeoPointCommitment } from "../../model/public/Commitment";
import { ExactGeolocationMetadataCircuitProof } from "../../zkprogram/public/Metadata";
import type { ZKGeoPoint } from "../models/ZKGeoPoint";
import type { IO1JSProof } from "./Types";
import { ZKGeoPointProviderCircuitProof } from "./ZKGeoPointProviderCircuitProof";
import { ZKLocusProof } from "./ZKLocusProof";
/**
 * Abstraction over the Zero-Knowledge proof of an exact GeoPoint with associated metadata.
 */
export declare class ZKExactGeolocationMetadataCircuitProof extends ZKLocusProof<ExactGeolocationMetadataCircuitProof> {
    protected _zkGeoPoint: ZKGeoPoint;
    protected _metadata: string;
    protected static _circuit: {
        name: string;
        compile: (options?: {
            cache?: import("o1js/dist/node/lib/proof-system/cache").Cache | undefined;
            forceRecompile?: boolean | undefined;
        } | undefined) => Promise<{
            verificationKey: {
                data: string;
                hash: import("o1js/dist/node/lib/field").Field;
            };
        }>;
        verify: (proof: import("o1js/dist/node/lib/proof_system").Proof<undefined, MetadataGeoPointCommitment>) => Promise<boolean>;
        digest: () => string;
        analyzeMethods: () => {
            attachMetadataToGeoPoint: {
                rows: number;
                digest: string;
                result: unknown;
                gates: import("o1js/dist/node/snarky").Gate[];
                publicInputSize: number;
                print(): void;
                summary(): Partial<Record<import("o1js/dist/node/snarky").GateType | "Total rows", number>>;
            };
        };
        publicInputType: import("o1js/dist/node/lib/circuit_value").ProvablePureExtended<undefined, null>;
        publicOutputType: typeof MetadataGeoPointCommitment;
        privateInputTypes: {
            attachMetadataToGeoPoint: [typeof import("../../zkprogram/private/Geography").GeoPointProviderCircuitProof, import("o1js/dist/node/lib/circuit_value").ProvablePureExtended<import("o1js/dist/node/lib/provable-types/bytes").Bytes, {
                bytes: {
                    value: string;
                }[];
            }>];
        };
        rawMethods: {
            attachMetadataToGeoPoint: (...args: [import("../../zkprogram/private/Geography").GeoPointProviderCircuitProof, import("o1js/dist/node/lib/provable-types/bytes").Bytes] & any[]) => MetadataGeoPointCommitment;
        };
    } & {
        attachMetadataToGeoPoint: (...args: [import("../../zkprogram/private/Geography").GeoPointProviderCircuitProof, import("o1js/dist/node/lib/provable-types/bytes").Bytes] & any[]) => Promise<import("o1js/dist/node/lib/proof_system").Proof<undefined, MetadataGeoPointCommitment>>;
    };
    protected static _dependentProofs: (typeof ZKGeoPointProviderCircuitProof)[];
    constructor(_zkGeoPoint: ZKGeoPoint, _metadata: string, proof: ExactGeolocationMetadataCircuitProof);
    static fromJSON(jsonProof: JsonProof): IO1JSProof;
    protected assertGeoPointAndMetadataAreTheClaimedOnes(): void;
    /**
     * Verifies the proof.
     * This operation is not
     */
    verify(): void;
    /**
     * Gets the zero-knowledge geometric point.
     * Calls the verify method.
     * @returns The zero-knowledge geometric point.
     */
    get zkGeoPoint(): ZKGeoPoint;
    /**
     * Gets the metadata of the ZKExactGeolocationMetadataCircuitProof.
     * @returns The metadata as a string.
     */
    get metadata(): string;
}
