var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ExactGeolocationMetadataCircuit, ExactGeolocationMetadataCircuitProof } from "../../zkprogram/public/Metadata";
import { SHA3_512 } from "../sha3/SHA3";
import { ZKGeoPointProviderCircuitProof } from "./ZKGeoPointProviderCircuitProof";
import { ZKLocusProof } from "./ZKLocusProof";
import CachingProofVerificationMiddleware from "./middleware/CachingProofVerificationMiddleware";
/**
 * Abstraction over the Zero-Knowledge proof of an exact GeoPoint with associated metadata.
 */
let ZKExactGeolocationMetadataCircuitProof = class ZKExactGeolocationMetadataCircuitProof extends ZKLocusProof {
    constructor(_zkGeoPoint, _metadata, proof) {
        super();
        this._zkGeoPoint = _zkGeoPoint;
        this._metadata = _metadata;
        this._proof = proof;
    }
    static fromJSON(jsonProof) {
        return ExactGeolocationMetadataCircuitProof.fromJSON(jsonProof);
    }
    assertGeoPointAndMetadataAreTheClaimedOnes() {
        const geoPointMetadataCommitment = this.proof.publicOutput;
        const geoPointCommitment = geoPointMetadataCommitment.geoPointHash;
        const claimedGeoPointCommitment = this._zkGeoPoint.hash();
        if (!geoPointCommitment.equals(claimedGeoPointCommitment)) {
            throw new Error("The GeoPoint is not the claimed one");
        }
        const metadataCommitment = geoPointMetadataCommitment.metadataHash;
        const clamimedMetadataHash = new SHA3_512(this._metadata);
        const claimedMetadataCommitment = clamimedMetadataHash.poseidonHash();
        if (!metadataCommitment.equals(claimedMetadataCommitment)) {
            throw new Error("The metadata is not the claimed one");
        }
    }
    /**
     * Verifies the proof.
     * This operation is not
     */
    verify() {
        super.verify();
        this.assertGeoPointAndMetadataAreTheClaimedOnes();
    }
    /**
     * Gets the zero-knowledge geometric point.
     * Calls the verify method.
     * @returns The zero-knowledge geometric point.
     */
    get zkGeoPoint() {
        this.verify();
        return this._zkGeoPoint;
    }
    /**
     * Gets the metadata of the ZKExactGeolocationMetadataCircuitProof.
     * @returns The metadata as a string.
     */
    get metadata() {
        this.verify();
        return this._metadata;
    }
};
ZKExactGeolocationMetadataCircuitProof._circuit = ExactGeolocationMetadataCircuit;
ZKExactGeolocationMetadataCircuitProof._dependentProofs = [
    ZKGeoPointProviderCircuitProof,
];
ZKExactGeolocationMetadataCircuitProof = __decorate([
    CachingProofVerificationMiddleware,
    __metadata("design:paramtypes", [Function, String, ExactGeolocationMetadataCircuitProof])
], ZKExactGeolocationMetadataCircuitProof);
export { ZKExactGeolocationMetadataCircuitProof };
//# sourceMappingURL=ZKExactGeolocationMetadataCircuitProof.js.map