import { Cache, JsonProof } from "o1js";
import { ExactGeoPointCircuitProof } from "../../zkprogram/public/ExactGeoPointCircuit";
import { ZKLocusProof } from "./ZKLocusProof";
import { IO1JSProof } from "./Types";
import type { ZKGeoPoint } from "../models/ZKGeoPoint";
import { GeoPointCommitment } from "../../model/public/Commitment";
import { ZKGeoPointProviderCircuitProof } from "./ZKGeoPointProviderCircuitProof";
import { GeoPointProviderCircuitProof } from "../../zkprogram/private/Geography";
/**
 * Represents a proof for an exact geographical point (GeoPoint) in a zero-knowledge circuit.
 * This class is an abstraction over the ExactGeoPointCircuitProof class, which is the actual zero-knowledge proof.
 * The proof is not generated by this class, but rather passed to it in the constructor. In order to generate a proof
 * from an Oracle, use the methods of ZKGeoPoint class.
 */
export declare class ZKExactGeoPointCircuitProof extends ZKLocusProof<ExactGeoPointCircuitProof> {
    protected _proof: ExactGeoPointCircuitProof;
    protected static _circuit: {
        name: string;
        compile: (options?: {
            cache?: Cache | undefined;
            forceRecompile?: boolean | undefined;
        } | undefined) => Promise<{
            verificationKey: {
                data: string;
                hash: import("o1js/dist/node/lib/field").Field;
            };
        }>;
        verify: (proof: import("o1js/dist/node/lib/proof_system").Proof<undefined, GeoPointCommitment>) => Promise<boolean>;
        digest: () => string;
        analyzeMethods: () => {
            fromGeoPointProvider: {
                rows: number;
                digest: string;
                result: unknown;
                gates: import("o1js/dist/node/snarky").Gate[];
                publicInputSize: number;
                print(): void;
                summary(): Partial<Record<import("o1js/dist/node/snarky").GateType | "Total rows", number>>;
            };
        };
        publicInputType: import("o1js/dist/node/lib/circuit_value").ProvablePureExtended<undefined, null>;
        publicOutputType: typeof GeoPointCommitment;
        privateInputTypes: {
            fromGeoPointProvider: [typeof GeoPointProviderCircuitProof];
        };
        rawMethods: {
            fromGeoPointProvider: (...args: [GeoPointProviderCircuitProof] & any[]) => GeoPointCommitment;
        };
    } & {
        fromGeoPointProvider: (...args: [GeoPointProviderCircuitProof] & any[]) => Promise<import("o1js/dist/node/lib/proof_system").Proof<undefined, GeoPointCommitment>>;
    };
    protected claimedZKGeoPoint: ZKGeoPoint;
    protected static _dependentProofs: (typeof ZKGeoPointProviderCircuitProof)[];
    /**
     * Creates a new instance of ZKExactGeoPointCircuitProof.
     * @param zkGeoPoint The zero-knowledge geometric point.
     * @param proof The proof for the exact geometric point circuit.
     */
    constructor(zkGeoPoint: ZKGeoPoint, proof: ExactGeoPointCircuitProof);
    /**
     * Creates a ZKExactGeoPointCircuitProof from a ZKGeoPointProviderCircuitProof.
     *
     * @param proof - The ZKGeoPointProviderCircuitProof to create the ZKExactGeoPointCircuitProof from.
     * @returns A Promise that resolves to a ZKExactGeoPointCircuitProof.
     */
    static fromZKGeoPointProviderProof(proof: ZKGeoPointProviderCircuitProof): Promise<ZKExactGeoPointCircuitProof>;
    /**
     * Creates an instance of ZKExactGeoPointCircuitProof from a JSON representation.
     * @param jsonProof The JSON representation of the proof.
     * @returns An instance of ZKExactGeoPointCircuitProof.
     */
    static fromJSON(jsonProof: JsonProof): IO1JSProof;
    /**
     * Asserts that the geometric point is the claimed one.
     * Throws an error if the geometric point is not the claimed one.
     */
    protected assertGeoPointIsTheClaimedOne(): void;
    /**
     * Verifies the proof.
     * Calls the assertGeoPointIsTheClaimedOne method.
     */
    verify(): void;
    /**
     * Gets the zero-knowledge geometric point.
     * Calls the verify method.
     * @returns The zero-knowledge geometric point.
     */
    get zkGeoPoint(): ZKGeoPoint;
}
