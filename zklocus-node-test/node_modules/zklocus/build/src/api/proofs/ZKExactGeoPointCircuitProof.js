var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ZKExactGeoPointCircuitProof_1;
import { ExactGeoPointCircuit, ExactGeoPointCircuitProof } from "../../zkprogram/public/ExactGeoPointCircuit";
import { ZKLocusProof } from "./ZKLocusProof";
import CachingProofVerificationMiddleware from "./middleware/CachingProofVerificationMiddleware";
import { ZKGeoPointProviderCircuitProof } from "./ZKGeoPointProviderCircuitProof";
/**
 * Represents a proof for an exact geographical point (GeoPoint) in a zero-knowledge circuit.
 * This class is an abstraction over the ExactGeoPointCircuitProof class, which is the actual zero-knowledge proof.
 * The proof is not generated by this class, but rather passed to it in the constructor. In order to generate a proof
 * from an Oracle, use the methods of ZKGeoPoint class.
 */
let ZKExactGeoPointCircuitProof = ZKExactGeoPointCircuitProof_1 = class ZKExactGeoPointCircuitProof extends ZKLocusProof {
    /**
     * Creates a new instance of ZKExactGeoPointCircuitProof.
     * @param zkGeoPoint The zero-knowledge geometric point.
     * @param proof The proof for the exact geometric point circuit.
     */
    constructor(zkGeoPoint, proof) {
        super();
        this._proof = proof;
        this.claimedZKGeoPoint = zkGeoPoint;
    }
    /**
     * Creates a ZKExactGeoPointCircuitProof from a ZKGeoPointProviderCircuitProof.
     *
     * @param proof - The ZKGeoPointProviderCircuitProof to create the ZKExactGeoPointCircuitProof from.
     * @returns A Promise that resolves to a ZKExactGeoPointCircuitProof.
     */
    static async fromZKGeoPointProviderProof(proof) {
        proof.verify();
        const zkGeoPoint = proof.zkGeoPoint;
        const geoPointProviderProof = proof.proof;
        const exactGeoPointProof = await ExactGeoPointCircuit.fromGeoPointProvider(geoPointProviderProof);
        return new ZKExactGeoPointCircuitProof_1(zkGeoPoint, exactGeoPointProof);
    }
    /**
     * Creates an instance of ZKExactGeoPointCircuitProof from a JSON representation.
     * @param jsonProof The JSON representation of the proof.
     * @returns An instance of ZKExactGeoPointCircuitProof.
     */
    static fromJSON(jsonProof) {
        return ExactGeoPointCircuitProof.fromJSON(jsonProof);
    }
    /**
     * Asserts that the geometric point is the claimed one.
     * Throws an error if the geometric point is not the claimed one.
     */
    assertGeoPointIsTheClaimedOne() {
        const geoPointCommitment = this._proof.publicOutput;
        const claimedGeoPointCommitment = this.claimedZKGeoPoint.hash();
        if (!geoPointCommitment.geoPointHash.equals(claimedGeoPointCommitment)) {
            throw new Error("The GeoPoint is not the claimed one");
        }
    }
    /**
     * Verifies the proof.
     * Calls the assertGeoPointIsTheClaimedOne method.
     */
    verify() {
        super.verify();
        this.assertGeoPointIsTheClaimedOne();
    }
    /**
     * Gets the zero-knowledge geometric point.
     * Calls the verify method.
     * @returns The zero-knowledge geometric point.
     */
    get zkGeoPoint() {
        this.verify();
        return this.claimedZKGeoPoint;
    }
};
ZKExactGeoPointCircuitProof._circuit = ExactGeoPointCircuit;
ZKExactGeoPointCircuitProof._dependentProofs = [
    ZKGeoPointProviderCircuitProof,
];
ZKExactGeoPointCircuitProof = ZKExactGeoPointCircuitProof_1 = __decorate([
    CachingProofVerificationMiddleware,
    __metadata("design:paramtypes", [Function, ExactGeoPointCircuitProof])
], ZKExactGeoPointCircuitProof);
export { ZKExactGeoPointCircuitProof };
//# sourceMappingURL=ZKExactGeoPointCircuitProof.js.map