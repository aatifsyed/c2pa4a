import { GeoPointInPolygonCircuitProof } from "../../../zkprogram/private/GeoPointInPolygonCircuit";
import { Bool } from "o1js";
import type { ZKGeoPointInPolygonProof } from "../ZKGeoPointInPolygonProof";
/**
 * This is a middleware that adds caching and cache invalidation to the verification of a proof. It should be used as a decorator on a class that extends ZKGeoPointInPolygonProof.
 * @param Base - The base class to extend
 * @returns A class that extends the base class and adds caching to the verification of the proof
 */
export default function <T extends new (...args: any[]) => ZKGeoPointInPolygonProof>(Base: T): {
    new (...args: any[]): {
        isVerified: boolean;
        verify(): void;
        verifyIf(condition: Bool): void;
        readonly isCached: boolean;
        setProof(proof: GeoPointInPolygonCircuitProof): void;
        AND(other: ZKGeoPointInPolygonProof): Promise<ZKGeoPointInPolygonProof>;
        geoPoint: import("../../..").ZKGeoPoint;
        threePointPolygon: import("../../..").ZKThreePointPolygon | undefined;
        _isInside: boolean;
        _leftZKProof: ZKGeoPointInPolygonProof | undefined;
        _rightZKProof: ZKGeoPointInPolygonProof | undefined;
        _operator: import("../ZKGeoPointInPolygonProof").GeoPointInPolygonCombinationOperator;
        readonly leftZKProof: ZKGeoPointInPolygonProof | undefined;
        readonly rightZKProof: ZKGeoPointInPolygonProof | undefined;
        readonly operator: import("../ZKGeoPointInPolygonProof").GeoPointInPolygonCombinationOperator;
        readonly UnverifiedProofData: import("../ZKGeoPointInPolygonProof").UnverifiedProofDataType;
        clone(): ZKGeoPointInPolygonProof;
        clearCache(): void;
        polygonHash(): import("o1js/dist/node/lib/field").Field;
        readonly zkGeoPoint: import("../../..").ZKGeoPoint;
        readonly zkPolygon: import("../../..").ZKThreePointPolygon | undefined;
        readonly isGeoPointInsidePolygon: boolean;
        readonly polygon: import("../../..").ZKThreePointPolygon | undefined;
        readonly polygonOrError: import("../../..").ZKThreePointPolygon;
        assertVerifyCoordinatesAndPolygonAreTheClaimedOnes(): void;
        isEquals(other: ZKGeoPointInPolygonProof): boolean;
        _proof: GeoPointInPolygonCircuitProof | import("../../../zkprogram/private/GeoPointInPolygonCircuit").GeoPointInPolygonCombinerCircuitProof;
        toJSON(): import("o1js/dist/node/lib/proof_system").JsonProof;
        readonly proof: GeoPointInPolygonCircuitProof | import("../../../zkprogram/private/GeoPointInPolygonCircuit").GeoPointInPolygonCombinerCircuitProof;
    };
} & T;
