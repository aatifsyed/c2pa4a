import { Bool, JsonProof } from "o1js";
import { OracleAuthenticatedGeoPointCommitment } from "../../model/private/Oracle";
import { OracleGeoPointProviderCircuitProof } from "../../zkprogram/private/Oracle";
import type { ZKGeoPoint } from "../models/ZKGeoPoint";
import type { ZKPublicKey } from "../models/ZKPublicKey";
import type { ZKSignature } from "../models/ZKSignature";
import { IO1JSProof } from "./Types";
import { ZKLocusProof } from "./ZKLocusProof";
export declare class ZKOracleGeoPointProviderCircuitProof extends ZKLocusProof<OracleGeoPointProviderCircuitProof> {
    protected zkPublicKey: ZKPublicKey;
    protected zkSignature: ZKSignature;
    protected _zkGeoPoint: ZKGeoPoint;
    protected static _circuit: {
        name: string;
        compile: (options?: {
            cache?: import("o1js/dist/node/lib/proof-system/cache").Cache | undefined;
            forceRecompile?: boolean | undefined;
        } | undefined) => Promise<{
            verificationKey: {
                data: string;
                hash: import("o1js/dist/node/lib/field").Field;
            };
        }>;
        verify: (proof: import("o1js/dist/node/lib/proof_system").Proof<undefined, OracleAuthenticatedGeoPointCommitment>) => Promise<boolean>;
        digest: () => string;
        analyzeMethods: () => {
            fromSignature: {
                rows: number;
                digest: string;
                result: unknown;
                gates: import("o1js/dist/node/snarky").Gate[];
                publicInputSize: number;
                print(): void;
                summary(): Partial<Record<import("o1js/dist/node/snarky").GateType | "Total rows", number>>;
            };
        };
        publicInputType: import("o1js/dist/node/lib/circuit_value").ProvablePureExtended<undefined, null>;
        publicOutputType: typeof OracleAuthenticatedGeoPointCommitment;
        privateInputTypes: {
            fromSignature: [typeof import("o1js/dist/node/lib/signature").PublicKey, typeof import("o1js/dist/node/lib/signature").Signature, typeof import("../../model/Geography").GeoPoint];
        };
        rawMethods: {
            fromSignature: (...args: [import("o1js/dist/node/lib/signature").PublicKey, import("o1js/dist/node/lib/signature").Signature, import("../../model/Geography").GeoPoint] & any[]) => OracleAuthenticatedGeoPointCommitment;
        };
    } & {
        fromSignature: (...args: [import("o1js/dist/node/lib/signature").PublicKey, import("o1js/dist/node/lib/signature").Signature, import("../../model/Geography").GeoPoint] & any[]) => Promise<import("o1js/dist/node/lib/proof_system").Proof<undefined, OracleAuthenticatedGeoPointCommitment>>;
    };
    protected static _dependentProofs: never[];
    constructor(zkPublicKey: ZKPublicKey, zkSignature: ZKSignature, _zkGeoPoint: ZKGeoPoint, proof: OracleGeoPointProviderCircuitProof);
    static fromJSON(jsonProof: JsonProof): IO1JSProof;
    /**
     * Verify that the commitment output by the zero-knowlede circuit matches the claimed GeoPoint and PublicKey.
     */
    assertGeoPointIsTheClaimedOne(): void;
    verify(): void;
    verifyIf(condition: Bool): void;
    /**
     * The geopoint that was signed by the Oracle.
     */
    get zkGeoPoint(): ZKGeoPoint;
    toJSON(): JsonProof;
}
