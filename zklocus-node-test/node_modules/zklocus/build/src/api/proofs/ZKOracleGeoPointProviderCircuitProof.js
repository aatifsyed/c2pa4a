var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { OracleGeoPointProviderCircuit, OracleGeoPointProviderCircuitProof } from "../../zkprogram/private/Oracle";
import { ZKLocusProof, ZKOracleAuthenticatedGeoPointCommitment } from "./ZKLocusProof";
import CachingProofVerificationMiddleware from "./middleware/CachingProofVerificationMiddleware";
let ZKOracleGeoPointProviderCircuitProof = class ZKOracleGeoPointProviderCircuitProof extends ZKLocusProof {
    constructor(zkPublicKey, zkSignature, _zkGeoPoint, proof) {
        super();
        this.zkPublicKey = zkPublicKey;
        this.zkSignature = zkSignature;
        this._zkGeoPoint = _zkGeoPoint;
        this._proof = proof;
    }
    static fromJSON(jsonProof) {
        return OracleGeoPointProviderCircuitProof.fromJSON(jsonProof);
    }
    /**
     * Verify that the commitment output by the zero-knowlede circuit matches the claimed GeoPoint and PublicKey.
     */
    assertGeoPointIsTheClaimedOne() {
        const commitment = this._proof.publicOutput;
        const commitmentVerifier = new ZKOracleAuthenticatedGeoPointCommitment(this._zkGeoPoint, this.zkPublicKey, commitment);
        commitmentVerifier.verify();
    }
    verify() {
        super.verify();
        this.assertGeoPointIsTheClaimedOne();
    }
    verifyIf(condition) {
        if (condition) {
            this.verify();
        }
    }
    /**
     * The geopoint that was signed by the Oracle.
     */
    get zkGeoPoint() {
        this.verify();
        return this._zkGeoPoint;
    }
    toJSON() {
        return this._proof.toJSON();
    }
};
ZKOracleGeoPointProviderCircuitProof._circuit = OracleGeoPointProviderCircuit;
ZKOracleGeoPointProviderCircuitProof._dependentProofs = [];
ZKOracleGeoPointProviderCircuitProof = __decorate([
    CachingProofVerificationMiddleware,
    __metadata("design:paramtypes", [Function, Function, Function, OracleGeoPointProviderCircuitProof])
], ZKOracleGeoPointProviderCircuitProof);
export { ZKOracleGeoPointProviderCircuitProof };
//# sourceMappingURL=ZKOracleGeoPointProviderCircuitProof.js.map