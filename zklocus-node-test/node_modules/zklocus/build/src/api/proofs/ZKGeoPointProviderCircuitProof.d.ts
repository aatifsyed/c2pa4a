import { JsonProof } from "o1js";
import { GeoPointProviderCircuitProof } from "../../zkprogram/private/Geography";
import { IO1JSProof } from "./Types";
import { ZKLocusProof } from "./ZKLocusProof";
import { GeoPoint } from "../../model/Geography";
import { ZKGeoPoint } from "../models/ZKGeoPoint";
import { OracleGeoPointProviderCircuitProof } from "../../zkprogram/private/Oracle";
import { ZKOracleGeoPointProviderCircuitProof } from "./ZKOracleGeoPointProviderCircuitProof";
export declare class ZKGeoPointProviderCircuitProof extends ZKLocusProof<GeoPointProviderCircuitProof> {
    protected _proof: GeoPointProviderCircuitProof;
    protected static _circuit: {
        name: string;
        compile: (options?: {
            cache?: import("o1js/dist/node/lib/proof-system/cache").Cache | undefined;
            forceRecompile?: boolean | undefined;
        } | undefined) => Promise<{
            verificationKey: {
                data: string;
                hash: import("o1js/dist/node/lib/field").Field;
            };
        }>;
        verify: (proof: import("o1js/dist/node/lib/proof_system").Proof<undefined, GeoPoint>) => Promise<boolean>;
        digest: () => string;
        analyzeMethods: () => {
            fromLiteralGeoPoint: {
                rows: number;
                digest: string;
                result: unknown;
                gates: import("o1js/dist/node/snarky").Gate[];
                publicInputSize: number;
                print(): void;
                summary(): Partial<Record<import("o1js/dist/node/snarky").GateType | "Total rows", number>>;
            };
            fromOracle: {
                rows: number;
                digest: string;
                result: unknown;
                gates: import("o1js/dist/node/snarky").Gate[];
                publicInputSize: number;
                print(): void;
                summary(): Partial<Record<import("o1js/dist/node/snarky").GateType | "Total rows", number>>;
            };
        };
        publicInputType: import("o1js/dist/node/lib/circuit_value").ProvablePureExtended<undefined, null>;
        publicOutputType: typeof GeoPoint;
        privateInputTypes: {
            fromLiteralGeoPoint: [typeof GeoPoint];
            fromOracle: [typeof OracleGeoPointProviderCircuitProof, typeof GeoPoint];
        };
        rawMethods: {
            fromLiteralGeoPoint: (...args: [GeoPoint] & any[]) => GeoPoint;
            fromOracle: (...args: [OracleGeoPointProviderCircuitProof, GeoPoint] & any[]) => GeoPoint;
        };
    } & {
        fromLiteralGeoPoint: (...args: [GeoPoint] & any[]) => Promise<import("o1js/dist/node/lib/proof_system").Proof<undefined, GeoPoint>>;
        fromOracle: (...args: [OracleGeoPointProviderCircuitProof, GeoPoint] & any[]) => Promise<import("o1js/dist/node/lib/proof_system").Proof<undefined, GeoPoint>>;
    };
    protected static _dependentProofs: (typeof ZKOracleGeoPointProviderCircuitProof)[];
    constructor(proof: GeoPointProviderCircuitProof);
    static fromJSON(jsonProof: JsonProof): IO1JSProof;
    get zkGeoPoint(): ZKGeoPoint;
    /**
     * Creates a ZKGeoPointProviderCircuitProof from a ZKGeoPointSignatureVerificationCircuitProof and a ZKGeoPoint.
     * @param proof - The ZKGeoPointSignatureVerificationCircuitProof to create the ZKGeoPointProviderCircuitProof from.
     * @param zkGeoPoint - The ZKGeoPoint to use in the creation of the ZKGeoPointProviderCircuitProof.
     * @returns A Promise that resolves to a ZKGeoPointProviderCircuitProof.
     */
    static fromOracleSignatureProof(proof: ZKOracleGeoPointProviderCircuitProof): Promise<ZKGeoPointProviderCircuitProof>;
}
