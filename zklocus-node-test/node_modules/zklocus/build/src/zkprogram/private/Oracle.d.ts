import { PublicKey, Signature } from "o1js";
import { GeoPoint } from "../../model/Geography";
import { OracleAuthenticatedGeoPointCommitment } from "../../model/private/Oracle";
/**
 * An implementation of an authenticted GeoPoint source that uses an Oracle. The Oracle can run arbitrary code,
 * it can be implemented in any programming language, and run in an arbitrary environment, such as the public
 * blockchain like Mina and Ethereum, or a REST HTTP endpoint.
 *
 * This circuit recieves an authenticated GeoPoint (latitude, longitude geographic coordinates) from *any* Oracle,
 * verifies that response, and returns a commitment to the GeoPoint provided by the Oracle. The authenticating Oracle
 * is cryptographically included in the output GeoPoint commitment, since the GeoPoint is hashed together with the
 * digest of the public key.
 *
 * The Circuit works with any Oracle, by parameterizing the public key as a private intput. This means that it can be
 * used with any public key. As such, there is no need to write custom circuits for each Oracle, as this one can be
 * reused by them all. You focus on writing the Oracle in the programming language of your choice, execute it in the
 * environemnt of your choice, and zkLocus will naturally integrate with YOUR solution. Moreover, using custom
 * Oralces does not complicate the end-user API usage in any manner.
 */
export declare const OracleGeoPointProviderCircuit: {
    name: string;
    compile: (options?: {
        cache?: import("o1js/dist/node/lib/proof-system/cache").Cache | undefined;
        forceRecompile?: boolean | undefined;
    } | undefined) => Promise<{
        verificationKey: {
            data: string;
            hash: import("o1js/dist/node/lib/field").Field;
        };
    }>;
    verify: (proof: import("o1js/dist/node/lib/proof_system").Proof<undefined, OracleAuthenticatedGeoPointCommitment>) => Promise<boolean>;
    digest: () => string;
    analyzeMethods: () => {
        fromSignature: {
            rows: number;
            digest: string;
            result: unknown;
            gates: import("o1js/dist/node/snarky").Gate[];
            publicInputSize: number;
            print(): void;
            summary(): Partial<Record<import("o1js/dist/node/snarky").GateType | "Total rows", number>>;
        };
    };
    publicInputType: import("o1js/dist/node/lib/circuit_value").ProvablePureExtended<undefined, null>;
    publicOutputType: typeof OracleAuthenticatedGeoPointCommitment;
    privateInputTypes: {
        fromSignature: [typeof PublicKey, typeof Signature, typeof GeoPoint];
    };
    rawMethods: {
        fromSignature: (...args: [PublicKey, Signature, GeoPoint] & any[]) => OracleAuthenticatedGeoPointCommitment;
    };
} & {
    fromSignature: (...args: [PublicKey, Signature, GeoPoint] & any[]) => Promise<import("o1js/dist/node/lib/proof_system").Proof<undefined, OracleAuthenticatedGeoPointCommitment>>;
};
declare const OracleGeoPointProviderCircuitProof_base: {
    new ({ proof, publicInput, publicOutput, maxProofsVerified, }: {
        proof: unknown;
        publicInput: undefined;
        publicOutput: OracleAuthenticatedGeoPointCommitment;
        maxProofsVerified: 0 | 1 | 2;
    }): {
        publicInput: undefined;
        publicOutput: OracleAuthenticatedGeoPointCommitment;
        proof: unknown;
        maxProofsVerified: 0 | 1 | 2;
        shouldVerify: import("o1js/dist/node/lib/bool").Bool;
        verify(): void;
        verifyIf(condition: import("o1js/dist/node/lib/bool").Bool): void;
        toJSON(): import("o1js/dist/node/lib/proof_system").JsonProof;
    };
    publicInputType: import("o1js/dist/node/lib/circuit_value").ProvablePureExtended<undefined, null>;
    publicOutputType: typeof OracleAuthenticatedGeoPointCommitment;
    tag: () => {
        name: string;
        publicInputType: import("o1js/dist/node/lib/circuit_value").ProvablePureExtended<undefined, null>;
        publicOutputType: typeof OracleAuthenticatedGeoPointCommitment;
    };
    fromJSON<S extends (new (...args: any) => import("o1js/dist/node/lib/proof_system").Proof<unknown, unknown>) & {
        prototype: import("o1js/dist/node/lib/proof_system").Proof<any, any>;
        publicInputType: import("o1js/dist/node/lib/circuit_value").FlexibleProvablePure<any>;
        publicOutputType: import("o1js/dist/node/lib/circuit_value").FlexibleProvablePure<any>;
        tag: () => {
            name: string;
        };
        fromJSON: typeof import("o1js/dist/node/lib/proof_system").Proof.fromJSON;
        dummy: typeof import("o1js/dist/node/lib/proof_system").Proof.dummy;
    } & {
        prototype: import("o1js/dist/node/lib/proof_system").Proof<unknown, unknown>;
    }>(this: S, { maxProofsVerified, proof: proofString, publicInput: publicInputJson, publicOutput: publicOutputJson, }: import("o1js/dist/node/lib/proof_system").JsonProof): import("o1js/dist/node/lib/proof_system").Proof<import("o1js/dist/node/bindings/lib/provable-generic").InferProvable<S["publicInputType"], import("o1js/dist/node/lib/field").Field>, import("o1js/dist/node/bindings/lib/provable-generic").InferProvable<S["publicOutputType"], import("o1js/dist/node/lib/field").Field>>;
    dummy<Input, OutPut>(publicInput: Input, publicOutput: OutPut, maxProofsVerified: 0 | 1 | 2, domainLog2?: number | undefined): Promise<import("o1js/dist/node/lib/proof_system").Proof<Input, OutPut>>;
};
export declare class OracleGeoPointProviderCircuitProof extends OracleGeoPointProviderCircuitProof_base {
}
export {};
