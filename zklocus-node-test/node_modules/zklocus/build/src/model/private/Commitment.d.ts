import { GeoPoint, ThreePointPolygon } from '../Geography.js';
import { TimeStampInterval } from "../Time.js";
declare const GeoPointInPolygonCommitment_base: (new (value: {
    polygonCommitment: import("o1js/dist/node/lib/field.js").Field;
    geoPointCommitment: import("o1js/dist/node/lib/field.js").Field;
    isInPolygon: import("o1js/dist/node/lib/bool.js").Bool;
}) => {
    polygonCommitment: import("o1js/dist/node/lib/field.js").Field;
    geoPointCommitment: import("o1js/dist/node/lib/field.js").Field;
    isInPolygon: import("o1js/dist/node/lib/bool.js").Bool;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky.js").ProvablePure<{
    polygonCommitment: import("o1js/dist/node/lib/field.js").Field;
    geoPointCommitment: import("o1js/dist/node/lib/field.js").Field;
    isInPolygon: import("o1js/dist/node/lib/bool.js").Bool;
}> & {
    toInput: (x: {
        polygonCommitment: import("o1js/dist/node/lib/field.js").Field;
        geoPointCommitment: import("o1js/dist/node/lib/field.js").Field;
        isInPolygon: import("o1js/dist/node/lib/bool.js").Bool;
    }) => {
        fields?: import("o1js/dist/node/lib/field.js").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field.js").Field, number][] | undefined;
    };
    toJSON: (x: {
        polygonCommitment: import("o1js/dist/node/lib/field.js").Field;
        geoPointCommitment: import("o1js/dist/node/lib/field.js").Field;
        isInPolygon: import("o1js/dist/node/lib/bool.js").Bool;
    }) => {
        polygonCommitment: string;
        geoPointCommitment: string;
        isInPolygon: boolean;
    };
    fromJSON: (x: {
        polygonCommitment: string;
        geoPointCommitment: string;
        isInPolygon: boolean;
    }) => {
        polygonCommitment: import("o1js/dist/node/lib/field.js").Field;
        geoPointCommitment: import("o1js/dist/node/lib/field.js").Field;
        isInPolygon: import("o1js/dist/node/lib/bool.js").Bool;
    };
    empty: () => {
        polygonCommitment: import("o1js/dist/node/lib/field.js").Field;
        geoPointCommitment: import("o1js/dist/node/lib/field.js").Field;
        isInPolygon: import("o1js/dist/node/lib/bool.js").Bool;
    };
};
export declare class GeoPointInPolygonCommitment extends GeoPointInPolygonCommitment_base {
    toString(): string;
}
declare const GeoPointInOutPolygonCommitment_base: (new (value: {
    insidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
    outsidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
    coordinatesCommitment: import("o1js/dist/node/lib/field.js").Field;
}) => {
    insidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
    outsidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
    coordinatesCommitment: import("o1js/dist/node/lib/field.js").Field;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky.js").ProvablePure<{
    insidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
    outsidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
    coordinatesCommitment: import("o1js/dist/node/lib/field.js").Field;
}> & {
    toInput: (x: {
        insidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
        outsidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
        coordinatesCommitment: import("o1js/dist/node/lib/field.js").Field;
    }) => {
        fields?: import("o1js/dist/node/lib/field.js").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field.js").Field, number][] | undefined;
    };
    toJSON: (x: {
        insidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
        outsidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
        coordinatesCommitment: import("o1js/dist/node/lib/field.js").Field;
    }) => {
        insidePolygonCommitment: string;
        outsidePolygonCommitment: string;
        coordinatesCommitment: string;
    };
    fromJSON: (x: {
        insidePolygonCommitment: string;
        outsidePolygonCommitment: string;
        coordinatesCommitment: string;
    }) => {
        insidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
        outsidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
        coordinatesCommitment: import("o1js/dist/node/lib/field.js").Field;
    };
    empty: () => {
        insidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
        outsidePolygonCommitment: import("o1js/dist/node/lib/field.js").Field;
        coordinatesCommitment: import("o1js/dist/node/lib/field.js").Field;
    };
};
/**
 * Two-dimensional private geolocation commitment. It repreesents a commitment to a GeoPoint being outside a list of polygons and inside a list of polygons.
 *
 * IMPORTANT: This commitment expression should only be utilized in the case of
 */
export declare class GeoPointInOutPolygonCommitment extends GeoPointInOutPolygonCommitment_base {
    toString(): string;
}
declare const ProoveCoordinatesIn3dPolygonArgumentsValues_base: (new (value: {
    point: GeoPoint;
    polygon: ThreePointPolygon;
}) => {
    point: GeoPoint;
    polygon: ThreePointPolygon;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky.js").ProvablePure<{
    point: GeoPoint;
    polygon: ThreePointPolygon;
}> & {
    toInput: (x: {
        point: GeoPoint;
        polygon: ThreePointPolygon;
    }) => {
        fields?: import("o1js/dist/node/lib/field.js").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field.js").Field, number][] | undefined;
    };
    toJSON: (x: {
        point: GeoPoint;
        polygon: ThreePointPolygon;
    }) => {
        point: {
            latitude: any;
            longitude: any;
            factor: any;
        };
        polygon: {
            vertice1: {
                latitude: any;
                longitude: any;
                factor: any;
            };
            vertice2: {
                latitude: any;
                longitude: any;
                factor: any;
            };
            vertice3: {
                latitude: any;
                longitude: any;
                factor: any;
            };
        };
    };
    fromJSON: (x: {
        point: {
            latitude: any;
            longitude: any;
            factor: any;
        };
        polygon: {
            vertice1: {
                latitude: any;
                longitude: any;
                factor: any;
            };
            vertice2: {
                latitude: any;
                longitude: any;
                factor: any;
            };
            vertice3: {
                latitude: any;
                longitude: any;
                factor: any;
            };
        };
    }) => {
        point: GeoPoint;
        polygon: ThreePointPolygon;
    };
    empty: () => {
        point: GeoPoint;
        polygon: ThreePointPolygon;
    };
};
export declare class ProoveCoordinatesIn3dPolygonArgumentsValues extends ProoveCoordinatesIn3dPolygonArgumentsValues_base {
}
declare const GeoPointWithTimeStampIntervalInPolygonCommitment_base: (new (value: {
    geoPointInPolygonCommitment: GeoPointInPolygonCommitment;
    timestamp: TimeStampInterval;
}) => {
    geoPointInPolygonCommitment: GeoPointInPolygonCommitment;
    timestamp: TimeStampInterval;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky.js").ProvablePure<{
    geoPointInPolygonCommitment: GeoPointInPolygonCommitment;
    timestamp: TimeStampInterval;
}> & {
    toInput: (x: {
        geoPointInPolygonCommitment: GeoPointInPolygonCommitment;
        timestamp: TimeStampInterval;
    }) => {
        fields?: import("o1js/dist/node/lib/field.js").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field.js").Field, number][] | undefined;
    };
    toJSON: (x: {
        geoPointInPolygonCommitment: GeoPointInPolygonCommitment;
        timestamp: TimeStampInterval;
    }) => {
        geoPointInPolygonCommitment: {
            polygonCommitment: string;
            geoPointCommitment: string;
            isInPolygon: boolean;
        };
        timestamp: {
            start: string;
            end: string;
        };
    };
    fromJSON: (x: {
        geoPointInPolygonCommitment: {
            polygonCommitment: string;
            geoPointCommitment: string;
            isInPolygon: boolean;
        };
        timestamp: {
            start: string;
            end: string;
        };
    }) => {
        geoPointInPolygonCommitment: GeoPointInPolygonCommitment;
        timestamp: TimeStampInterval;
    };
    empty: () => {
        geoPointInPolygonCommitment: GeoPointInPolygonCommitment;
        timestamp: TimeStampInterval;
    };
};
export declare class GeoPointWithTimeStampIntervalInPolygonCommitment extends GeoPointWithTimeStampIntervalInPolygonCommitment_base {
    toString(): string;
}
declare const GeoPointCommitment_base: (new (value: {
    geoPoint: GeoPoint;
}) => {
    geoPoint: GeoPoint;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky.js").ProvablePure<{
    geoPoint: GeoPoint;
}> & {
    toInput: (x: {
        geoPoint: GeoPoint;
    }) => {
        fields?: import("o1js/dist/node/lib/field.js").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field.js").Field, number][] | undefined;
    };
    toJSON: (x: {
        geoPoint: GeoPoint;
    }) => {
        geoPoint: {
            latitude: any;
            longitude: any;
            factor: any;
        };
    };
    fromJSON: (x: {
        geoPoint: {
            latitude: any;
            longitude: any;
            factor: any;
        };
    }) => {
        geoPoint: GeoPoint;
    };
    empty: () => {
        geoPoint: GeoPoint;
    };
};
export declare class GeoPointCommitment extends GeoPointCommitment_base {
    toString(): string;
}
export {};
