import { Field } from "o1js";
declare const OracleAuthenticatedGeoPointCommitment_base: (new (value: {
    publicKeyHash: import("o1js/dist/node/lib/field").Field;
    geoPointHash: import("o1js/dist/node/lib/field").Field;
}) => {
    publicKeyHash: import("o1js/dist/node/lib/field").Field;
    geoPointHash: import("o1js/dist/node/lib/field").Field;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky").ProvablePure<{
    publicKeyHash: import("o1js/dist/node/lib/field").Field;
    geoPointHash: import("o1js/dist/node/lib/field").Field;
}> & {
    toInput: (x: {
        publicKeyHash: import("o1js/dist/node/lib/field").Field;
        geoPointHash: import("o1js/dist/node/lib/field").Field;
    }) => {
        fields?: import("o1js/dist/node/lib/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        publicKeyHash: import("o1js/dist/node/lib/field").Field;
        geoPointHash: import("o1js/dist/node/lib/field").Field;
    }) => {
        publicKeyHash: string;
        geoPointHash: string;
    };
    fromJSON: (x: {
        publicKeyHash: string;
        geoPointHash: string;
    }) => {
        publicKeyHash: import("o1js/dist/node/lib/field").Field;
        geoPointHash: import("o1js/dist/node/lib/field").Field;
    };
    empty: () => {
        publicKeyHash: import("o1js/dist/node/lib/field").Field;
        geoPointHash: import("o1js/dist/node/lib/field").Field;
    };
};
/**
 * Represents a GeoPoint that is authenticated by an Oracle. The Oracle is cryptographically attached to the
 * source by having its public key included in the commitment. When used, this commitment should attest that
 * the GeoPoint whose hash is included in the commitment was indeed signed by the private key of the public key
 * included in the commitment.
 */
export declare class OracleAuthenticatedGeoPointCommitment extends OracleAuthenticatedGeoPointCommitment_base {
    toString(): string;
    hash(): Field;
}
export {};
