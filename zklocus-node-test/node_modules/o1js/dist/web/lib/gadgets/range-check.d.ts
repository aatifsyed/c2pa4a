import { Field } from '../field.js';
import { Bool } from '../bool.js';
export { rangeCheck64, rangeCheck32, multiRangeCheck, compactMultiRangeCheck, rangeCheckHelper, rangeCheckN, isInRangeN, rangeCheck8, rangeCheck16, };
export { l, l2, l3, lMask, l2Mask };
/**
 * Asserts that x is in the range [0, 2^32)
 */
declare function rangeCheck32(x: Field): void;
/**
 * Asserts that x is in the range [0, 2^64)
 */
declare function rangeCheck64(x: Field): void;
declare const l = 88n;
declare const l2: bigint;
declare const l3: bigint;
declare const lMask: bigint;
declare const l2Mask: bigint;
/**
 * Asserts that x, y, z \in [0, 2^88)
 */
declare function multiRangeCheck([x, y, z]: [Field, Field, Field]): void;
/**
 * Compact multi-range-check - checks
 * - xy = x + 2^88*y
 * - x, y, z \in [0, 2^88)
 *
 * Returns the full limbs x, y, z
 */
declare function compactMultiRangeCheck(xy: Field, z: Field): [Field, Field, Field];
/**
 * Helper function that creates a new {@link Field} element from the first `length` bits of this {@link Field} element.
 */
declare function rangeCheckHelper(length: number, x: Field): Field;
/**
 * Asserts that x is in the range [0, 2^n)
 */
declare function rangeCheckN(n: number, x: Field, message?: string): void;
/**
 * Checks that x is in the range [0, 2^n) and returns a Boolean indicating whether the check passed.
 */
declare function isInRangeN(n: number, x: Field): Bool;
declare function rangeCheck16(x: Field): void;
declare function rangeCheck8(x: Field): void;
