import type { Field, VarField } from '../field.js';
export { assertBoolean, arrayGet, assertOneOf };
/**
 * Assert that x is either 0 or 1.
 */
declare function assertBoolean(x: VarField): void;
/**
 * Get value from array in O(n) rows.
 *
 * Assumes that index is in [0, n), returns an unconstrained result otherwise.
 *
 * Note: This saves 0.5*n constraints compared to equals() + switch()
 */
declare function arrayGet(array: Field[], index: Field): VarField;
/**
 * Assert that a value equals one of a finite list of constants:
 * `(x - c1)*(x - c2)*...*(x - cn) === 0`
 *
 * TODO: what prevents us from getting the same efficiency with snarky DSL code?
 */
declare function assertOneOf(x: Field, allowed: [bigint, bigint, ...bigint[]]): void;
