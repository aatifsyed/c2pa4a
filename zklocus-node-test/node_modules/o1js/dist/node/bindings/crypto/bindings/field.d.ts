import { Bigint256, MlBytes } from './bigint256.js';
import { MlOption, MlBool } from '../../../lib/ml/base.js';
type Field = [0, bigint];
export { FpBindings, FqBindings, Field };
declare const FpBindings: {
    caml_pasta_fp_sub: ([, x]: Field, [, y]: Field) => Field;
    caml_pasta_fp_add: ([, x]: Field, [, y]: Field) => Field;
    caml_pasta_fp_square: ([, x]: Field) => Field;
    caml_pasta_fp_negate: ([, x]: Field) => Field;
    caml_pasta_fp_copy: (x: Field, [, y]: Field) => void;
    caml_pasta_fp_div: ([, x]: Field, [, y]: Field) => Field;
    caml_pasta_fp_size: () => Bigint256;
    caml_pasta_fp_print: (x: Field) => void;
    caml_pasta_fp_mul: ([, x]: Field, [, y]: Field) => Field;
    caml_pasta_fp_inv: ([, x]: Field) => MlOption<Field>;
    caml_pasta_fp_sqrt: ([, x]: Field) => MlOption<Field>;
    caml_pasta_fp_compare: (x: Field, y: Field) => number;
    caml_pasta_fp_to_string: ([, x]: Field) => MlBytes;
    caml_pasta_fp_to_bytes: (x: Field) => MlBytes;
    caml_pasta_fp_of_bytes: (bytes: MlBytes) => Field;
    caml_pasta_fp_deep_copy: ([, x]: Field) => Field;
    caml_pasta_fp_size_in_bits: () => number;
    caml_pasta_fp_is_square: ([, x]: Field) => MlBool;
    caml_pasta_fp_of_int: (x: number) => Field;
    caml_pasta_fp_of_string: (s: MlBytes) => Field;
    caml_pasta_fp_mut_add: (x: Field, [, y]: Field) => void;
    caml_pasta_fp_mut_sub: (x: Field, [, y]: Field) => void;
    caml_pasta_fp_mut_mul: (x: Field, [, y]: Field) => void;
    caml_pasta_fp_mut_square: (x: Field) => void;
    caml_pasta_fp_equal: ([, x]: Field, [, y]: Field) => MlBool;
    caml_pasta_fp_random: () => Field;
    caml_pasta_fp_rng: (i: number) => Field;
    caml_pasta_fp_to_bigint: ([, x]: Field) => Bigint256;
    caml_pasta_fp_of_bigint: ([, x]: Bigint256) => Field;
    caml_pasta_fp_two_adic_root_of_unity: () => Field;
    caml_pasta_fp_domain_generator: (i: number) => Field;
};
declare const FqBindings: {
    caml_pasta_fq_sub: ([, x]: Field, [, y]: Field) => Field;
    caml_pasta_fq_add: ([, x]: Field, [, y]: Field) => Field;
    caml_pasta_fq_square: ([, x]: Field) => Field;
    caml_pasta_fq_negate: ([, x]: Field) => Field;
    caml_pasta_fq_copy: (x: Field, [, y]: Field) => void;
    caml_pasta_fq_div: ([, x]: Field, [, y]: Field) => Field;
    caml_pasta_fq_size: () => Bigint256;
    caml_pasta_fq_print: (x: Field) => void;
    caml_pasta_fq_mul: ([, x]: Field, [, y]: Field) => Field;
    caml_pasta_fq_inv: ([, x]: Field) => MlOption<Field>;
    caml_pasta_fq_sqrt: ([, x]: Field) => MlOption<Field>;
    caml_pasta_fq_compare: (x: Field, y: Field) => number;
    caml_pasta_fq_to_string: ([, x]: Field) => MlBytes;
    caml_pasta_fq_to_bytes: (x: Field) => MlBytes;
    caml_pasta_fq_of_bytes: (bytes: MlBytes) => Field;
    caml_pasta_fq_deep_copy: ([, x]: Field) => Field;
    caml_pasta_fq_size_in_bits: () => number;
    caml_pasta_fq_is_square: ([, x]: Field) => MlBool;
    caml_pasta_fq_of_int: (x: number) => Field;
    caml_pasta_fq_of_string: (s: MlBytes) => Field;
    caml_pasta_fq_mut_add: (x: Field, [, y]: Field) => void;
    caml_pasta_fq_mut_sub: (x: Field, [, y]: Field) => void;
    caml_pasta_fq_mut_mul: (x: Field, [, y]: Field) => void;
    caml_pasta_fq_mut_square: (x: Field) => void;
    caml_pasta_fq_equal: ([, x]: Field, [, y]: Field) => MlBool;
    caml_pasta_fq_random: () => Field;
    caml_pasta_fq_rng: (i: number) => Field;
    caml_pasta_fq_to_bigint: ([, x]: Field) => Bigint256;
    caml_pasta_fq_of_bigint: ([, x]: Bigint256) => Field;
    caml_pasta_fq_two_adic_root_of_unity: () => Field;
    caml_pasta_fq_domain_generator: (i: number) => Field;
};
