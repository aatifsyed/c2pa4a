import { Field, FieldConst, FieldVar, VarField } from '../field.js';
import { Tuple, TupleN } from '../util/types.js';
import { Snarky } from '../../snarky.js';
import { MlArray } from '../ml/base.js';
import { Bool } from '../bool.js';
const MAX_BITS = 64;
export { MAX_BITS, exists, existsOne, toVars, toVar, isVar, assert, bitSlice, divideWithRemainder, };
function existsOne(compute) {
    let varMl = Snarky.existsVar(() => FieldConst.fromBigint(compute()));
    return VarField(varMl);
}
function exists(n, compute) {
    let varsMl = Snarky.exists(n, () => MlArray.mapTo(compute(), FieldConst.fromBigint));
    let vars = MlArray.mapFrom(varsMl, VarField);
    return TupleN.fromArray(n, vars);
}
/**
 * Given a Field, collapse its AST to a pure Var. See {@link FieldVar}.
 *
 * This is useful to prevent rogue Generic gates added in the middle of gate chains,
 * which are caused by snarky auto-resolving constants, adds and scales to vars.
 *
 * Same as `Field.seal()` with the difference that `seal()` leaves constants as is.
 */
function toVar(x) {
    // don't change existing vars
    if (isVar(x))
        return x;
    let xVar = existsOne(() => Field.from(x).toBigInt());
    xVar.assertEquals(x);
    return xVar;
}
function isVar(x) {
    return x instanceof Field && FieldVar.isVar(x.value);
}
/**
 * Apply {@link toVar} to each element of a tuple.
 */
function toVars(fields) {
    return Tuple.map(fields, toVar);
}
/**
 * Assert that a statement is true. If the statement is false, throws an error with the given message.
 * Can be used in provable code.
 */
function assert(stmt, message) {
    if (stmt instanceof Bool) {
        stmt.assertTrue(message ?? 'Assertion failed');
    }
    else if (!stmt) {
        throw Error(message ?? 'Assertion failed');
    }
}
function bitSlice(x, start, length) {
    return (x >> BigInt(start)) & ((1n << BigInt(length)) - 1n);
}
function divideWithRemainder(numerator, denominator) {
    const quotient = numerator / denominator;
    const remainder = numerator - denominator * quotient;
    return { quotient, remainder };
}
//# sourceMappingURL=common.js.map